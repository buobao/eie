<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/task
    	http://www.springframework.org/schema/task/spring-task-3.1.xsd
    	http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-3.0.xsd"
       default-lazy-init="true"
       default-autowire="byName">

    <description>Spring公共配置</description>

    <!-- ActiveMQ -->

    <!--<jee:jndi-lookup id="mqConnectionFactory" jndi-name="java:comp/env/jms/mqConnectionFactory" />-->
    <!--&lt;!&ndash;这个是队列目的地&ndash;&gt;-->
    <!--<jee:jndi-lookup jndi-name="java:comp/env/jms/queueDestination" id="queueDestination" />-->
    <!--&lt;!&ndash;这个是sessionAwareQueue目的地&ndash;&gt;-->
    <!--<jee:jndi-lookup jndi-name="java:comp/env/jms/sessionAwareQueue" id="sessionAwareQueue"/>-->
    <!--&lt;!&ndash; 用于测试消息监听适配器的队列目的地 &ndash;&gt;-->
    <!--<jee:jndi-lookup jndi-name="java:comp/env/jms/adapterQueue" id="adapterQueue"/>-->
    <!--&lt;!&ndash; 用于测试消息回复的 &ndash;&gt;-->
    <!--<jee:jndi-lookup jndi-name="java:comp/env/jms/responseQueue" id="responseQueue"/>-->
    <!--&lt;!&ndash; 默认的消息回复队列 &ndash;&gt;-->
    <!--<jee:jndi-lookup jndi-name="java:comp/env/jms/defaultResponseQueue" id="defaultResponseQueue"/>-->
    <!--&lt;!&ndash;这个是主题目的地&ndash;&gt;-->
    <!--<jee:jndi-lookup jndi-name="java:comp/env/jms/topicDestination" id="topicDestination"/>-->


    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"/>
    </bean>

    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="targetConnectionFactory"/>
    </bean>

    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="connectionFactory"/>
    </bean>

    <!--这个是队列目的地-->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>queue</value>
        </constructor-arg>
    </bean>

    <!--这个是sessionAwareQueue目的地-->
    <bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>sessionAwareQueue</value>
        </constructor-arg>
    </bean>
    <!-- 用于测试消息监听适配器的队列目的地 -->
    <bean id="adapterQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>adapterQueue</value>
        </constructor-arg>
    </bean>
    <!-- 用于测试消息回复的 -->
    <bean id="responseQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>responseQueue</value>
        </constructor-arg>
    </bean>
    <!-- 默认的消息回复队列 -->
    <bean id="defaultResponseQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>defaultResponseQueue</value>
        </constructor-arg>
    </bean>

    <!--这个是主题目的地-->
    <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg value="topic"/>
    </bean>
    <!-- 消息监听器 -->
    <bean id="consumerMessageListener" class="com.buobao.eie.listener.ConsumerMessageListener">
        <property name="messageConverter" ref="emailMessageConverter"/>
    </bean>
    <!-- 可以获取session的MessageListener -->
    <bean id="consumerSessionAwareMessageListener" class="com.buobao.eie.listener.ConsumerSessionAwareMessageListener">
        <property name="destination" ref="queueDestination"/>
    </bean>
    <!-- 消息监听适配器 -->
    <bean id="messageListenerAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
        <!-- <constructor-arg>
            <bean class="com.tiantian.springintejms.listener.ConsumerListener"/>
        </constructor-arg> -->
        <property name="delegate">
            <bean class="com.buobao.eie.listener.ConsumerListener"/>
        </property>
        <property name="defaultListenerMethod" value="receiveMessage"/>
        <property name="defaultResponseDestination" ref="defaultResponseQueue"/>
        <property name="messageConverter">
            <null/>
        </property>
    </bean>
    <!-- responseQueue对应的监听器 -->
    <bean id="responseQueueListener" class="com.buobao.eie.listener.ResponseQueueListener"/>
    <!-- defaultResponseQueue对应的监听器 -->
    <bean id="defaultResponseQueueListener" class="com.buobao.eie.listener.DefaultResponseQueueListener"/>
    <!-- 消息监听适配器对应的监听容器 -->
    <bean id="messageListenerAdapterContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="adapterQueue"/>
        <property name="messageListener" ref="messageListenerAdapter"/><!-- 使用MessageListenerAdapter来作为消息监听器 -->
    </bean>
    <!-- responseQueue对应的监听容器 -->
    <bean id="responseQueueMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="responseQueue"/>
        <property name="messageListener" ref="responseQueueListener"/>
    </bean>
    <!-- defaultResponseQueue对应的监听容器 -->
    <bean id="defaultResponseQueueMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="defaultResponseQueue"/>
        <property name="messageListener" ref="defaultResponseQueueListener"/>
    </bean>
    <!-- 消息监听容器 -->
    <bean id="jmsContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="queueDestination" />
        <property name="messageListener" ref="consumerMessageListener" />
    </bean>

    <!--<bean id="topicConsumer" class="com.tiantian.springintejms.service.TopicConsumer">-->
    <!--</bean>-->

    <!--&lt;!&ndash; 消息监听容器 &ndash;&gt;-->
    <!--<bean id="jmsContainer"-->
    <!--class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
    <!--<property name="connectionFactory" ref="connectionFactory" />-->
    <!--<property name="destination" ref="topicDestination" />-->
    <!--<property name="messageListener" ref="topicConsumer" />-->
    <!--</bean>-->

    <bean id="sessionAwareListenerContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="sessionAwareQueue" />
        <property name="messageListener" ref="consumerSessionAwareMessageListener" />
    </bean>

    <!-- 类型转换器 -->
    <bean id="emailMessageConverter" class="com.buobao.eie.utils.EmailMessageConverter"/>


    <!--<jee:jndi-lookup id="testQueueOne" jndi-name="java:comp/env/jms/testQueueOne" />-->
    <!--<jee:jndi-lookup id="testQueueTwo" jndi-name="java:comp/env/jms/testQueueTwo" />-->

    <!--<bean id="testMessageListener" class="com.buobao.eie.jms.TestMessageListener">-->
        <!--<property name="testMessageSender" ref ="testMessageSender" />-->
    <!--</bean>-->

    <!--<bean id="poiMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
        <!--<property name="connectionFactory" ref ="mqConnectionFactory" />-->
        <!--<property name="destination" ref ="testQueueOne"/>-->
        <!--<property name="messageListener" ref ="testMessageListener"/>-->
        <!--<property name="concurrentConsumers" value="2" />-->
    <!--</bean>-->

    <!--<bean id="testMessageSender" class="com.buobao.eie.jms.TestMessageSender">-->
        <!--<property name="jmsTemplate" ref="jmsTemplate"/>-->
        <!--<property name="testQueue" ref="testQueueTwo"/>-->
    <!--</bean>-->

    <!--<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">-->
        <!--<property name="connectionFactory" ref="mqConnectionFactory" />-->
    <!--</bean>-->



    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.buobao.eie.****">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 引入属性文件-->
    <context:property-placeholder location="classpath:application.properties" />

    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20" />
        <!-- 连接池最大空闲 -->
        <!--<property name="maxIdle" value="20" />-->
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />
        <!--
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
         -->
        <property name="validationQuery" value="${validationQuery}" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />

        <!-- 监控数据库 -->
        <!--
        <property name="filters" value="stat" />
         -->
        <property name="filters" value="mergeStat" />
    </bean>

    <!-- sessionFactory 配置 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!-- 配置Hibernate拦截器,自动填充数据的插入、更新时间 -->
        <!--<property name="entityInterceptor" ref="entityInterceptor" />-->
        <property name="dataSource" ref="dataSource"></property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <!--<prop key="javax.persistence.validation.mode">none</prop>
                -->
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
            </props>
        </property>
        <!-- 扫描entity -->
        <property name="packagesToScan">
            <list>
                <value>com.buobao.eie.entity</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager"
          abstract="false" lazy-init="default" autowire="default">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>
    <!-- 事务管理配置 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" read-only="false" />
            <tx:method name="insert*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="get*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="add*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="update*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="delete*" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="count*" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 监控Dao、Service中的方法，会监控到Catch的定义-->
    <aop:config proxy-target-class="true">
        <aop:advisor pointcut="execution(* com.buobao.eie.*.dao.impl.*DaoImpl.*(..))"
                     advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.buobao.eie.*.service.impl.*ServiceImpl.*(..))"
                     advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.buobao.eie.*.dao.impl.*DaoImpl.*(..))"
                     advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.buobao.eie.*.service.impl.*ServiceImpl.*(..))"
                     advice-ref="txAdvice"/>
        <aop:advisor pointcut="execution(* com.buobao.eie.*.service.activiti.*Service.*(..))"
                     advice-ref="txAdvice"/>
    </aop:config>

    <!-- JDBC配置 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>

    <!-- 配置druid监控spring jdbc -->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.buobao.eie.*.service.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut" />
    </aop:config>

    <aop:aspectj-autoproxy proxy-target-class="true" />

    <!-- production环境 -->
    <beans profile="production,job">
        <context:property-placeholder ignore-unresolvable="true"
                                      location="classpath*:/application.properties" />
        <!--<import resource="classpath:quartz/applicationContext-quartz.xml"/>-->
    </beans>

    <!-- local development环境 -->
    <beans profile="development">
        <context:property-placeholder ignore-resource-not-found="true"
                                      location="classpath*:/application.development.properties" />
        <!--<import resource="classpath:quartz/applicationContext-quartz.xml"/>-->
        <!-- 演示用的JMemcached, 模拟Memcached服务器，正式服务器将这行注释
        <bean id="memcachedSimulator" class="com.fz.us.base.service.memcached.MemcachedSimulator" lazy-init="false">
            <property name="serverUrl" value="${memcached.url}" />
        </bean>-->
    </beans>



    </beans>





















